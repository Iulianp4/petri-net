package com.petrinet.Controller;

import com.petrinet.Entity.Location;
import com.petrinet.Entity.Transition;
import com.petrinet.Service.PetriService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private PetriService petriService;

	@PostMapping(path="/add-location") // Map ONLY POST Requests
	public @ResponseBody String addNewLocation (@RequestParam Integer tokens) {
		return petriService.addNewLocation(tokens);
	}

	@PostMapping(path="/edit-location") // Map ONLY POST Requests
	public @ResponseBody String editLocation (@RequestParam Location location, @RequestParam Integer tokens) {
		return petriService.editLocation(location, tokens);
	}

	@GetMapping(path="/all-locations")
	public @ResponseBody Iterable<Location> getAllLocations() {
		return petriService.getAllLocations();
	}


	@PostMapping(path="/add-transition") // Map ONLY POST Requests
	public @ResponseBody String addNewTransition (@RequestParam List<Location> inputLocations,
												  @RequestParam List<Location> outputLocations) {
		return petriService.addNewTransition(inputLocations, outputLocations);
	}

	@PostMapping(path="/edit-transition") // Map ONLY POST Requests
	public @ResponseBody String editTransition (@RequestParam Transition transition,
												@RequestParam List<Location> inputLocations,
												@RequestParam List<Location> outputLocations) {
		return petriService.editTransition(transition, inputLocations, outputLocations);
	}

	@GetMapping(path="/all-transitions")
	public @ResponseBody Iterable<Transition> getAllTransitions() {
		return petriService.getAllTransitions();
	}

	@GetMapping(path="/get-current-marking")
	public @ResponseBody List<Integer> getCurrentMarking() {
		return petriService.getCurrentMarking();
	}

	@PostMapping(path="/execute-transition") // Map ONLY POST Requests
	public @ResponseBody String executeTransition (@RequestParam Transition transition) {
		return petriService.executeTransition(transition);
	}

	@GetMapping(path="/execute-petri-net") // Map ONLY POST Requests
	public @ResponseBody String executePetriNet () {
		return petriService.executePetriNet();
	}
}
